""" Programme qui s'occupe de faire la prédiction en se basant sur les poids déjà calculé """

import numpy as np


def sigmoid(z_sigmoid):
    """ Fonction qui calcule la sigmoid """

    return 1 / (1 + np.power(np.e, -z_sigmoid))


def name_symbol_predicted(output):
    """ Fonction qui analyse la sortie """

    maximum = max(output)
    index = output.argmax()
    letter = "..."

    match index:
        case 0:
            letter = "A"
        case 1:
            letter = "B"
        case 2:
            letter = "C"
        case 3:
            letter = "D"
        case 4:
            letter = "E"

    return letter, maximum


def prediction(symbol):
    """ Fonction qui fait la prédiction qui sera appelé dans le main """

    print(symbol)

    # Enregistrement des poids et biais
    W1 = [
        [0.4247353745603674, 0.8139907231998632, 0.903460869943813, 0.9493324020842075, 0.04917949173954112,
         0.16798179348876272, 0.9043398234254096, 0.14595192261945109
         ],
        [0.676021357962665, 0.9383905646777684, 0.6295937638106262, 0.2989913283506315, 0.31548893342724804,
         0.6625444062351014, 0.8887357970935262, 0.45059479405575104
         ],
        [0.8847298289837906, 0.8690981010530486, 0.6588238740303224, 0.3567270717308343, 0.10478486770090097,
         0.7717892116609368, 0.09659720147487834, 0.6500539606773507
         ],
        [0.602954189457883, 0.4562153803345729, 0.0345667358807819, 0.8222802025784482, 0.9654441359360938,
         0.08996671713980858, 0.6747410321847154, 0.470670751818386
         ],
        [0.5396272658948991, 0.1583089759417201, 0.5220457137559497, 0.6600378667636556, 0.4866683320401972,
         0.8994292665640307, 0.323580794071588, 0.11649723181698218
         ],
        [0.6917337367994949, 0.2819577665696849, 0.24341855180583438, 0.4850152252073432, 0.43313902023561746,
         0.7781824340675856, 0.5921329471359289, 0.5787965338899624
         ],
        [0.542790283912746, 0.023055343424230684, 0.705566585229295, 0.7101291021471486, 0.7199028572316727,
         0.10460857256660945, 0.5142073928361776, 0.003280640926016112
         ],
        [0.49026390124603286, 0.47998437764166635, 0.3202088761675331, 0.0077637490826222965, 0.3389565655496752,
         0.5487341536501287, 0.575995653205225, 0.39016873041063077
         ],
        [0.23041586657500798, 0.764494082682934, 0.357900820420737, 0.06866759386858279, 0.5282248009255838,
         0.8087936761716984, 0.5110314962572411, 0.7227226677152623
         ],
        [0.5919117604563563, 0.009765338434906743, 0.2636779464957303, 0.7408164424553952, 0.35075597314975737,
         0.02659153260041218, 0.5634562726629694, 0.5462762994964268
         ],
        [0.42025080551421323, 0.7297155177809179, 0.6412714734919924, 0.3778968685345818, 0.3689218486631234,
         0.7322389999613571, 0.9110347173805787, 0.06086690340669689
         ],
        [0.11992910636454114, 0.2931658523274484, 0.9073768847829925, 0.3500197213750598, 0.5810767497857067,
         0.2867808778511617, 0.9641099730868268, 0.5239196180890182
         ],
        [0.8518949032111546, 0.1680807206784694, 0.29074441382068367, 0.6230137154346992, 0.4927157084062282,
         0.830761412201524, 0.5109862773331639, 0.18252704220747393
         ],
        [0.8652480613677164, 0.8131614753241978, 0.5514185867100484, 0.9547273303033373, 0.5881954961824125,
         0.3663593276431805, 0.5606655225463772, 0.7130676071184849
         ],
        [0.9389129142294611, 0.15806513813269427, 0.7676607714569792, 0.8196719118494834, 0.9332459853136618,
         0.620600877126738, 0.2552147108351057, 0.568974249709715
         ],
        [0.0381375652029221, 0.026656007873888003, 0.408126516201724, 0.12767425979959707, 0.6859307060334534,
         0.5110599400679626, 0.8555526019988735, 0.47755956203802297]]
    b1 = [0.3666624546282967, 0.5619292103311622, 0.7929852933528543, 0.06486735532414861, 0.2048776119498751,
          0.4501235234066935, 0.8190573700140078, 0.009280596207238404]
    W_output = [
        [0.3023728094217622, 0.04700545199067378
         ],
        [0.8634733301140913, 0.7151639661624318
         ],
        [0.6614781259636892, 0.41471151780402205
         ],
        [0.7320605602603122, 0.8749920944001873
         ],
        [0.13554008460816785, 0.0165370385513731
         ],
        [0.25844315071612844, 0.5608669746931885
         ],
        [0.8310375190570874, 0.5912791733818865
         ],
        [0.31277642381778026, 0.7349419118461729]]
    b_output = [-0.049337470947420844,0.4552580319968708]

    # Calcul de la prédiction
    z1 = np.matmul(symbol, W1) + b1
    a1 = sigmoid(z1)
    print(a1)

    z_output = np.matmul(a1, W_output) + b_output
    a_output = sigmoid(z_output)
    print(a_output)

    # Analyse du résultat
    result = name_symbol_predicted(a_output)

    print(result)

    return result
